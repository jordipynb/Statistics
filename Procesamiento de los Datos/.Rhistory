Adult<- Adult %>% mutate(native_country = ifelse(grepl("United.",native_country), "USA", "Other"))
Adult$native_country <- as.factor(Adult$native_country)
# check for infinite values
numerics <- sapply(Adult, is.numeric)
special <- function(x){
if (is.numeric(x)) is.infinite(x)
}
#removing '?' in workclass and occupation
is.na(Adult) = Adult=='?'
is.na(Adult) = Adult==' ?'
Adult = na.omit(Adult)
#removing lost values
is.na(Adult$capital) = Adult$capital=='0'
Adult <- drop_na(Adult)
View(Adult)
View(Adult)
is.na(Adult$capital) = Adult$capital< 0
Adult <- drop_na(Adult)
dosis <- c(rep('Control',12),rep('25mg',12),rep('50mg',12),rep('100mg',12),rep('125mg',12))
parasitos_en_peces <- c(50,65,72,46,38,29,70,85,72,40,57,59,
49,47,30,62,62,60,19,28,56,62,55,40,
20,59,64,61,28,47,29,41,60,57,61,38,
20,23,38,31,27,16,27,18,22,12,24,11,
18,30,22,26,31,11,15,12,31,36,16,13)
df <- data.frame(dosis,parasitos_en_peces)
boxplot(parasitos_en_peces~dosis,data=df)
dosis.anova <- aov(parasitos_en_peces~dosis,data=df)
summary(dosis.anova)
res <- dosis.anova$residuals
layout(matrix(c(1,2,3,4),2,2,byrow = T))
plot(dosis.anova$fitted.values,rstandard(dosis.anova),main = "Residuos Estandarizdos",xlab = "Predicciones", ylab = "Residuos",ylim =  c(-2.5,2.5))
abline(h=0,lty = 2)
hist(res, main = "Histograma de residuos")
qqnorm(dosis.anova$residuals)
qqline(dosis.anova$residuals)
shapiro.test(res)
bartlett.test(res, df$dosis)
dwtest(dosis.anova)
#El p-value es menor que 0.05, por lo que el test de independencia es significativo, los errores no son independientes
#El p-value es menor que 0.05, por lo que el test de independencia es significativo, los errores no son independientes
adult.data <- read.csv('./adult.data.csv', sep = ',', fill = F, strip.white = T)
colnames(adult.data) <- c('age', 'workclass', 'fnlwgt', 'education',
'education_num', 'marital_status', 'occupation', 'relationship', 'race', 'sex',
'capital_gain', 'capital_loss', 'hours_per_week', 'native_country', 'income')
Adult <- as.data.frame(unclass(adult.data), stringsAsFactors = TRUE)
factors <- sapply(Adult, is.factor)
# remove whitespcaes in Factor variables
Adult <- data.frame(cbind(sapply(Adult[,factors], trimws), Adult[,!factors]))
Adult <- as.data.frame(unclass(Adult), stringsAsFactors = TRUE)
# adjusting the income variable to binary target.
levels(Adult$income)[levels(Adult$income)=="<=50K."] <- "<=50K"
levels(Adult$income)[levels(Adult$income)==">50K."] <- ">50K"
# Checking the levels of each factor variable
levels(Adult$income)[levels(Adult$income)=="<=50K"] <- "0"
levels(Adult$income)[levels(Adult$income)==">50K"] <- "1"
# changing data type to numeric, factor -> numeric
Adult$income <- as.numeric(Adult$income)-1
# re-levelling marital status factor
levels(Adult$marital_status)[levels(Adult$marital_status)=="Married-AF-spouse"] <- "Married"
levels(Adult$marital_status)[levels(Adult$marital_status)=="Married-civ-spouse"] <- "Married"
levels(Adult$marital_status)[levels(Adult$marital_status)=="Married-spouse-absent"] <- "Married"
#La variable 'fnlwgt' (significa peso final)
#se elimina porque no tiene poder predictivo, ya que es una función destinada a asignar pesos similares
#a personas con características demográficas similares. Se elimina 'Educación' ya que es solo una etiqueta
#en 'education_num' (número de años de educación).
# deleting fnlwgt and education from dataframe
Adult$education <- NULL
Adult$fnlwgt <- NULL
#La 'ganancia de capital' y la 'pérdida de capital' se convierten en una variable de 'capital' que se
#calcula restando la pérdida de capital de la ganancia de capital.
# creating 'capital' variable
Adult <- Adult %>% mutate(capital = capital_gain - capital_loss)
Adult$capital_gain <- NULL
Adult$capital_loss <- NULL
# No hay muchos individuos en cada categoría distinta de país de origen que no sea EE. UU.,
# por lo tanto, los agrupamos. Cambiar los niveles de 'País nativo' a 'EE. UU.' u 'Otro' aumentará el
# poder predictivo de estos atributos al modelar.
# binning all other native countries
Adult<- Adult %>% mutate(native_country = ifelse(grepl("United.",native_country), "USA", "Other"))
Adult$native_country <- as.factor(Adult$native_country)
# check for infinite values
numerics <- sapply(Adult, is.numeric)
special <- function(x){
if (is.numeric(x)) is.infinite(x)
}
#removing '?' in workclass and occupation
is.na(Adult) = Adult=='?'
is.na(Adult) = Adult==' ?'
Adult = na.omit(Adult)
#removing lost values
is.na(Adult$capital) = Adult$capital=='0'
Adult <- drop_na(Adult)
is.na(Adult$capital) = Adult$capital< 0
Adult <- drop_na(Adult)
View(Adult)
View(Adult)
View(Adult)
View(Adult)
view(Adult)
adult.data <- read.csv('./adult.data.csv', sep = ',', fill = F, strip.white = T)
adult.data <- read.csv('./adult.data.csv', sep = ',', fill = F, strip.white = T)
colnames(adult.data) <- c('age', 'workclass', 'fnlwgt', 'education',
'education_num', 'marital_status', 'occupation', 'relationship', 'race', 'sex',
'capital_gain', 'capital_loss', 'hours_per_week', 'native_country', 'income')
Adult <- as.data.frame(unclass(adult.data), stringsAsFactors = TRUE)
factors <- sapply(Adult, is.factor)
# remove whitespcaes in Factor variables
Adult <- data.frame(cbind(sapply(Adult[,factors], trimws), Adult[,!factors]))
Adult <- as.data.frame(unclass(Adult), stringsAsFactors = TRUE)
# adjusting the income variable to binary target.
levels(Adult$income)[levels(Adult$income)=="<=50K."] <- "<=50K"
levels(Adult$income)[levels(Adult$income)==">50K."] <- ">50K"
# Checking the levels of each factor variable
#levels(Adult$income)[levels(Adult$income)=="<=50K"] <- "0"
#levels(Adult$income)[levels(Adult$income)==">50K"] <- "1"
# changing data type to numeric, factor -> numeric
#Adult$income <- as.numeric(Adult$income)-1
# re-levelling marital status factor
levels(Adult$marital_status)[levels(Adult$marital_status)=="Married-AF-spouse"] <- "Married"
levels(Adult$marital_status)[levels(Adult$marital_status)=="Married-civ-spouse"] <- "Married"
levels(Adult$marital_status)[levels(Adult$marital_status)=="Married-spouse-absent"] <- "Married"
#La variable 'fnlwgt' (significa peso final)
#se elimina porque no tiene poder predictivo, ya que es una función destinada a asignar pesos similares
#a personas con características demográficas similares. Se elimina 'Educación' ya que es solo una etiqueta
#en 'education_num' (número de años de educación).
# deleting fnlwgt and education from dataframe
Adult$education <- NULL
Adult$fnlwgt <- NULL
#La 'ganancia de capital' y la 'pérdida de capital' se convierten en una variable de 'capital' que se
#calcula restando la pérdida de capital de la ganancia de capital.
# creating 'capital' variable
Adult <- Adult %>% mutate(capital = capital_gain - capital_loss)
Adult$capital_gain <- NULL
Adult$capital_loss <- NULL
# No hay muchos individuos en cada categoría distinta de país de origen que no sea EE. UU.,
# por lo tanto, los agrupamos. Cambiar los niveles de 'País nativo' a 'EE. UU.' u 'Otro' aumentará el
# poder predictivo de estos atributos al modelar.
# binning all other native countries
Adult<- Adult %>% mutate(native_country = ifelse(grepl("United.",native_country), "USA", "Other"))
Adult$native_country <- as.factor(Adult$native_country)
# check for infinite values
numerics <- sapply(Adult, is.numeric)
special <- function(x){
if (is.numeric(x)) is.infinite(x)
}
#removing '?' in workclass and occupation
is.na(Adult) = Adult=='?'
is.na(Adult) = Adult==' ?'
Adult = na.omit(Adult)
#removing lost values
is.na(Adult$capital) = Adult$capital=='0'
Adult <- drop_na(Adult)
is.na(Adult$capital) = Adult$capital< 0
Adult <- drop_na(Adult)
adult.data <- read.csv('./adult.data.csv', sep = ',', fill = F, strip.white = T)
colnames(adult.data) <- c('age', 'workclass', 'fnlwgt', 'education',
'education_num', 'marital_status', 'occupation', 'relationship', 'race', 'sex',
'capital_gain', 'capital_loss', 'hours_per_week', 'native_country', 'income')
Adult <- as.data.frame(unclass(adult.data), stringsAsFactors = TRUE)
factors <- sapply(Adult, is.factor)
# remove whitespcaes in Factor variables
Adult <- data.frame(cbind(sapply(Adult[,factors], trimws), Adult[,!factors]))
Adult <- as.data.frame(unclass(Adult), stringsAsFactors = TRUE)
# adjusting the income variable to binary target.
levels(Adult$income)[levels(Adult$income)=="<=50K."] <- "<=50K"
levels(Adult$income)[levels(Adult$income)==">50K."] <- ">50K"
# Checking the levels of each factor variable
#levels(Adult$income)[levels(Adult$income)=="<=50K"] <- "0"
#levels(Adult$income)[levels(Adult$income)==">50K"] <- "1"
# changing data type to numeric, factor -> numeric
#Adult$income <- as.numeric(Adult$income)-1
# re-levelling marital status factor
levels(Adult$marital_status)[levels(Adult$marital_status)=="Married-AF-spouse"] <- "Married"
levels(Adult$marital_status)[levels(Adult$marital_status)=="Married-civ-spouse"] <- "Married"
levels(Adult$marital_status)[levels(Adult$marital_status)=="Married-spouse-absent"] <- "Married"
#La variable 'fnlwgt' (significa peso final)
#se elimina porque no tiene poder predictivo, ya que es una función destinada a asignar pesos similares
#a personas con características demográficas similares. Se elimina 'Educación' ya que es solo una etiqueta
#en 'education_num' (número de años de educación).
# deleting fnlwgt and education from dataframe
Adult$education <- NULL
Adult$fnlwgt <- NULL
#La 'ganancia de capital' y la 'pérdida de capital' se convierten en una variable de 'capital' que se
#calcula restando la pérdida de capital de la ganancia de capital.
# creating 'capital' variable
Adult <- Adult %>% mutate(capital = capital_gain - capital_loss)
Adult$capital_gain <- NULL
Adult$capital_loss <- NULL
# No hay muchos individuos en cada categoría distinta de país de origen que no sea EE. UU.,
# por lo tanto, los agrupamos. Cambiar los niveles de 'País nativo' a 'EE. UU.' u 'Otro' aumentará el
# poder predictivo de estos atributos al modelar.
# binning all other native countries
Adult<- Adult %>% mutate(native_country = ifelse(grepl("United.",native_country), "USA", "Other"))
Adult$native_country <- as.factor(Adult$native_country)
# check for infinite values
numerics <- sapply(Adult, is.numeric)
special <- function(x){
if (is.numeric(x)) is.infinite(x)
}
#removing '?' in workclass and occupation
is.na(Adult) = Adult=='?'
is.na(Adult) = Adult==' ?'
Adult = na.omit(Adult)
#removing lost values
is.na(Adult$capital) = Adult$capital=='0'
Adult <- drop_na(Adult)
is.na(Adult$capital) = Adult$capital< 0
Adult <- drop_na(Adult)
View(Adult)
View(Adult)
adult.data <- read.csv('./adult.data.csv', sep = ',', fill = F, strip.white = T)
colnames(adult.data) <- c('age', 'workclass', 'fnlwgt', 'education',
'education_num', 'marital_status', 'occupation', 'relationship', 'race', 'sex',
'capital_gain', 'capital_loss', 'hours_per_week', 'native_country', 'income')
Adult <- as.data.frame(unclass(adult.data), stringsAsFactors = TRUE)
factors <- sapply(Adult, is.factor)
# remove whitespcaes in Factor variables
Adult <- data.frame(cbind(sapply(Adult[,factors], trimws), Adult[,!factors]))
Adult <- as.data.frame(unclass(Adult), stringsAsFactors = TRUE)
# adjusting the income variable to binary target.
levels(Adult$income)[levels(Adult$income)=="<=50K."] <- "<=50K"
levels(Adult$income)[levels(Adult$income)==">50K."] <- ">50K"
# re-levelling marital status factor
levels(Adult$marital_status)[levels(Adult$marital_status)=="Married-AF-spouse"] <- "Married"
levels(Adult$marital_status)[levels(Adult$marital_status)=="Married-civ-spouse"] <- "Married"
levels(Adult$marital_status)[levels(Adult$marital_status)=="Married-spouse-absent"] <- "Married"
# deleting fnlwgt and education from dataframe
Adult$education <- NULL
Adult$fnlwgt <- NULL
# creating 'capital' variable
Adult <- Adult %>% mutate(capital = capital_gain - capital_loss)
Adult$capital_gain <- NULL
Adult$capital_loss <- NULL
# binning all other native countries
Adult<- Adult %>% mutate(native_country = ifelse(grepl("United.",native_country), "USA", "Other"))
Adult$native_country <- as.factor(Adult$native_country)
# check for infinite values
numerics <- sapply(Adult, is.numeric)
library(backports)
library(bit)
library(bit64)
library(broom)
library(cli)
library(clipr)
library(colorspace)
library(cpp11)
library(crayon)
library(curl)
library(DBI)
library(digest)
library(DMwR2)
library(dplyr)
library(ellipsis)
library(fansi)
library(generics)
library(farver)
library(ggplot2)
library(glue)
library(gtable)
library(hms)
library(isoband)
library(labeling)
library(lifecycle)
library(lmtest)
library(magrittr)
library(mice)
library(munsell)
library(outliers)
library(pillar)
library(pkgconfig)
library(prettyunits)
library(progress)
library(purrr)
library(quantmod)
library(R6)
library(RColorBrewer)
library(Rcpp)
library(readr)
library(rlang)
library(withr)
library(vroom)
library(viridisLite)
library(vctrs)
library(utf8)
library(tzdb)
library(tidyselect)
library(tidyr)
library(stringr)
library(tibble)
library(stringi)
library(scales)
adult.data <- read.csv('./adult.data.csv', sep = ',', fill = F, strip.white = T)
colnames(adult.data) <- c('age', 'workclass', 'fnlwgt', 'education',
'education_num', 'marital_status', 'occupation', 'relationship', 'race', 'sex',
'capital_gain', 'capital_loss', 'hours_per_week', 'native_country', 'income')
Adult <- as.data.frame(unclass(adult.data), stringsAsFactors = TRUE)
factors <- sapply(Adult, is.factor)
# remove whitespcaes in Factor variables
Adult <- data.frame(cbind(sapply(Adult[,factors], trimws), Adult[,!factors]))
Adult <- as.data.frame(unclass(Adult), stringsAsFactors = TRUE)
# adjusting the income variable to binary target.
levels(Adult$income)[levels(Adult$income)=="<=50K."] <- "<=50K"
levels(Adult$income)[levels(Adult$income)==">50K."] <- ">50K"
# Checking the levels of each factor variable
#levels(Adult$income)[levels(Adult$income)=="<=50K"] <- "0"
#levels(Adult$income)[levels(Adult$income)==">50K"] <- "1"
# changing data type to numeric, factor -> numeric
#Adult$income <- as.numeric(Adult$income)-1
# re-levelling marital status factor
levels(Adult$marital_status)[levels(Adult$marital_status)=="Married-AF-spouse"] <- "Married"
levels(Adult$marital_status)[levels(Adult$marital_status)=="Married-civ-spouse"] <- "Married"
levels(Adult$marital_status)[levels(Adult$marital_status)=="Married-spouse-absent"] <- "Married"
#La variable 'fnlwgt' (significa peso final)
#se elimina porque no tiene poder predictivo, ya que es una función destinada a asignar pesos similares
#a personas con características demográficas similares. Se elimina 'Educación' ya que es solo una etiqueta
#en 'education_num' (número de años de educación).
# deleting fnlwgt and education from dataframe
Adult$education <- NULL
Adult$fnlwgt <- NULL
#La 'ganancia de capital' y la 'pérdida de capital' se convierten en una variable de 'capital' que se
#calcula restando la pérdida de capital de la ganancia de capital.
# creating 'capital' variable
Adult <- Adult %>% mutate(capital = capital_gain - capital_loss)
Adult$capital_gain <- NULL
Adult$capital_loss <- NULL
# No hay muchos individuos en cada categoría distinta de país de origen que no sea EE. UU.,
# por lo tanto, los agrupamos. Cambiar los niveles de 'País nativo' a 'EE. UU.' u 'Otro' aumentará el
# poder predictivo de estos atributos al modelar.
# binning all other native countries
Adult<- Adult %>% mutate(native_country = ifelse(grepl("United.",native_country), "USA", "Other"))
Adult$native_country <- as.factor(Adult$native_country)
# check for infinite values
numerics <- sapply(Adult, is.numeric)
special <- function(x){
if (is.numeric(x)) is.infinite(x)
}
#removing '?' in workclass and occupation
is.na(Adult) = Adult=='?'
is.na(Adult) = Adult==' ?'
Adult = na.omit(Adult)
#removing lost values
is.na(Adult$capital) = Adult$capital=='0'
Adult <- drop_na(Adult)
is.na(Adult$capital) = Adult$capital< 0
Adult <- drop_na(Adult)
View(Adult)
View(Adult)
adult.data <- read.csv('./adult.data.csv', sep = ',', fill = F, strip.white = T)
colnames(adult.data) <- c('age', 'workclass', 'fnlwgt', 'education',
'education_num', 'marital_status', 'occupation', 'relationship', 'race', 'sex',
'capital_gain', 'capital_loss', 'hours_per_week', 'native_country', 'income')
Adult <- as.data.frame(unclass(adult.data), stringsAsFactors = TRUE)
factors <- sapply(Adult, is.factor)
# remove whitespcaes in Factor variables
Adult <- data.frame(cbind(sapply(Adult[,factors], trimws), Adult[,!factors]))
Adult <- as.data.frame(unclass(Adult), stringsAsFactors = TRUE)
# adjusting the income variable to binary target.
levels(Adult$income)[levels(Adult$income)=="<=50K."] <- "<=50K"
levels(Adult$income)[levels(Adult$income)==">50K."] <- ">50K"
# Checking the levels of each factor variable
#levels(Adult$income)[levels(Adult$income)=="<=50K"] <- "0"
#levels(Adult$income)[levels(Adult$income)==">50K"] <- "1"
# changing data type to numeric, factor -> numeric
#Adult$income <- as.numeric(Adult$income)-1
# re-levelling marital status factor
levels(Adult$marital_status)[levels(Adult$marital_status)=="Married-AF-spouse"] <- "Married"
levels(Adult$marital_status)[levels(Adult$marital_status)=="Married-civ-spouse"] <- "Married"
levels(Adult$marital_status)[levels(Adult$marital_status)=="Married-spouse-absent"] <- "Married"
#La variable 'fnlwgt' (significa peso final)
#se elimina porque no tiene poder predictivo, ya que es una función destinada a asignar pesos similares
#a personas con características demográficas similares. Se elimina 'Educación' ya que es solo una etiqueta
#en 'education_num' (número de años de educación).
# deleting fnlwgt and education from dataframe
Adult$education <- NULL
Adult$fnlwgt <- NULL
#La 'ganancia de capital' y la 'pérdida de capital' se convierten en una variable de 'capital' que se
#calcula restando la pérdida de capital de la ganancia de capital.
# creating 'capital' variable
Adult <- Adult %>% mutate(capital = capital_gain - capital_loss)
Adult$capital_gain <- NULL
Adult$capital_loss <- NULL
# No hay muchos individuos en cada categoría distinta de país de origen que no sea EE. UU.,
# por lo tanto, los agrupamos. Cambiar los niveles de 'País nativo' a 'EE. UU.' u 'Otro' aumentará el
# poder predictivo de estos atributos al modelar.
# binning all other native countries
Adult<- Adult %>% mutate(native_country = ifelse(grepl("United.",native_country), "USA", "Other"))
Adult$native_country <- as.factor(Adult$native_country)
# check for infinite values
numerics <- sapply(Adult, is.numeric)
special <- function(x){
if (is.numeric(x)) is.infinite(x)
}
#removing '?' in workclass and occupation
is.na(Adult) = Adult=='?'
is.na(Adult) = Adult==' ?'
Adult = na.omit(Adult)
#removing lost values
is.na(Adult$capital) = Adult$capital=='0'
Adult <- drop_na(Adult)
is.na(Adult$capital) = Adult$capital< 0
Adult <- drop_na(Adult)
Adult -> write.csv('./adult.data2.csv', sep = ',', fill = F, strip.white = T)
adult.data <- read.csv('./adult.data.csv', sep = ',', fill = F, strip.white = T)
colnames(adult.data) <- c('age', 'workclass', 'fnlwgt', 'education',
'education_num', 'marital_status', 'occupation', 'relationship', 'race', 'sex',
'capital_gain', 'capital_loss', 'hours_per_week', 'native_country', 'income')
Adult <- as.data.frame(unclass(adult.data), stringsAsFactors = TRUE)
factors <- sapply(Adult, is.factor)
# remove whitespcaes in Factor variables
Adult <- data.frame(cbind(sapply(Adult[,factors], trimws), Adult[,!factors]))
Adult <- as.data.frame(unclass(Adult), stringsAsFactors = TRUE)
# adjusting the income variable to binary target.
levels(Adult$income)[levels(Adult$income)=="<=50K."] <- "<=50K"
levels(Adult$income)[levels(Adult$income)==">50K."] <- ">50K"
# Checking the levels of each factor variable
#levels(Adult$income)[levels(Adult$income)=="<=50K"] <- "0"
#levels(Adult$income)[levels(Adult$income)==">50K"] <- "1"
# changing data type to numeric, factor -> numeric
#Adult$income <- as.numeric(Adult$income)-1
# re-levelling marital status factor
levels(Adult$marital_status)[levels(Adult$marital_status)=="Married-AF-spouse"] <- "Married"
levels(Adult$marital_status)[levels(Adult$marital_status)=="Married-civ-spouse"] <- "Married"
levels(Adult$marital_status)[levels(Adult$marital_status)=="Married-spouse-absent"] <- "Married"
#La variable 'fnlwgt' (significa peso final)
#se elimina porque no tiene poder predictivo, ya que es una función destinada a asignar pesos similares
#a personas con características demográficas similares. Se elimina 'Educación' ya que es solo una etiqueta
#en 'education_num' (número de años de educación).
# deleting fnlwgt and education from dataframe
Adult$education <- NULL
Adult$fnlwgt <- NULL
#La 'ganancia de capital' y la 'pérdida de capital' se convierten en una variable de 'capital' que se
#calcula restando la pérdida de capital de la ganancia de capital.
# creating 'capital' variable
Adult <- Adult %>% mutate(capital = capital_gain - capital_loss)
Adult$capital_gain <- NULL
Adult$capital_loss <- NULL
# No hay muchos individuos en cada categoría distinta de país de origen que no sea EE. UU.,
# por lo tanto, los agrupamos. Cambiar los niveles de 'País nativo' a 'EE. UU.' u 'Otro' aumentará el
# poder predictivo de estos atributos al modelar.
# binning all other native countries
Adult<- Adult %>% mutate(native_country = ifelse(grepl("United.",native_country), "USA", "Other"))
Adult$native_country <- as.factor(Adult$native_country)
# check for infinite values
numerics <- sapply(Adult, is.numeric)
special <- function(x){
if (is.numeric(x)) is.infinite(x)
}
#removing '?' in workclass and occupation
is.na(Adult) = Adult=='?'
is.na(Adult) = Adult==' ?'
Adult = na.omit(Adult)
#removing lost values
is.na(Adult$capital) = Adult$capital=='0'
Adult <- drop_na(Adult)
is.na(Adult$capital) = Adult$capital< 0
Adult <- drop_na(Adult)
write.csv(Adult,'./adult.data2.csv', sep = ',', fill = F, strip.white = T)
adult.data <- read.csv('./adult.data.csv', sep = ',', fill = F, strip.white = T)
colnames(adult.data) <- c('age', 'workclass', 'fnlwgt', 'education',
'education_num', 'marital_status', 'occupation', 'relationship', 'race', 'sex',
'capital_gain', 'capital_loss', 'hours_per_week', 'native_country', 'income')
Adult <- as.data.frame(unclass(adult.data), stringsAsFactors = TRUE)
factors <- sapply(Adult, is.factor)
# remove whitespcaes in Factor variables
Adult <- data.frame(cbind(sapply(Adult[,factors], trimws), Adult[,!factors]))
Adult <- as.data.frame(unclass(Adult), stringsAsFactors = TRUE)
# adjusting the income variable to binary target.
levels(Adult$income)[levels(Adult$income)=="<=50K."] <- "<=50K"
levels(Adult$income)[levels(Adult$income)==">50K."] <- ">50K"
# Checking the levels of each factor variable
#levels(Adult$income)[levels(Adult$income)=="<=50K"] <- "0"
#levels(Adult$income)[levels(Adult$income)==">50K"] <- "1"
# changing data type to numeric, factor -> numeric
#Adult$income <- as.numeric(Adult$income)-1
# re-levelling marital status factor
levels(Adult$marital_status)[levels(Adult$marital_status)=="Married-AF-spouse"] <- "Married"
levels(Adult$marital_status)[levels(Adult$marital_status)=="Married-civ-spouse"] <- "Married"
levels(Adult$marital_status)[levels(Adult$marital_status)=="Married-spouse-absent"] <- "Married"
#La variable 'fnlwgt' (significa peso final)
#se elimina porque no tiene poder predictivo, ya que es una función destinada a asignar pesos similares
#a personas con características demográficas similares. Se elimina 'Educación' ya que es solo una etiqueta
#en 'education_num' (número de años de educación).
# deleting fnlwgt and education from dataframe
Adult$education <- NULL
Adult$fnlwgt <- NULL
#La 'ganancia de capital' y la 'pérdida de capital' se convierten en una variable de 'capital' que se
#calcula restando la pérdida de capital de la ganancia de capital.
# creating 'capital' variable
Adult <- Adult %>% mutate(capital = capital_gain - capital_loss)
Adult$capital_gain <- NULL
Adult$capital_loss <- NULL
# No hay muchos individuos en cada categoría distinta de país de origen que no sea EE. UU.,
# por lo tanto, los agrupamos. Cambiar los niveles de 'País nativo' a 'EE. UU.' u 'Otro' aumentará el
# poder predictivo de estos atributos al modelar.
# binning all other native countries
Adult<- Adult %>% mutate(native_country = ifelse(grepl("United.",native_country), "USA", "Other"))
Adult$native_country <- as.factor(Adult$native_country)
# check for infinite values
numerics <- sapply(Adult, is.numeric)
special <- function(x){
if (is.numeric(x)) is.infinite(x)
}
#removing '?' in workclass and occupation
is.na(Adult) = Adult=='?'
is.na(Adult) = Adult==' ?'
Adult = na.omit(Adult)
#removing lost values
is.na(Adult$capital) = Adult$capital=='0'
Adult <- drop_na(Adult)
is.na(Adult$capital) = Adult$capital< 0
Adult <- drop_na(Adult)
write.csv(Adult,'./adult.data2.csv')
